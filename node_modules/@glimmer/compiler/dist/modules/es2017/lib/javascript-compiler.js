import { assert } from '@glimmer/util';
import { Stack, DictSet } from '@glimmer/util';
import { Ops, isFlushElement, isArgument, isAttribute } from '@glimmer/wire-format';
export class Block {
    constructor() {
        this.statements = [];
    }
    push(statement) {
        this.statements.push(statement);
    }
}
export class InlineBlock extends Block {
    constructor(table) {
        super();
        this.table = table;
    }
    toJSON() {
        return {
            statements: this.statements,
            parameters: this.table.slots
        };
    }
}
export class TemplateBlock extends Block {
    constructor(symbolTable) {
        super();
        this.symbolTable = symbolTable;
        this.type = 'template';
        this.yields = new DictSet();
        this.named = new DictSet();
        this.blocks = [];
        this.hasEval = false;
    }
    push(statement) {
        this.statements.push(statement);
    }
    toJSON() {
        return {
            symbols: this.symbolTable.symbols,
            statements: this.statements,
            hasEval: this.hasEval
        };
    }
}
export class ComponentBlock extends Block {
    constructor(tag, table, selfClosing) {
        super();
        this.tag = tag;
        this.table = table;
        this.selfClosing = selfClosing;
        this.attributes = [];
        this.arguments = [];
        this.inParams = true;
        this.positionals = [];
    }
    push(statement) {
        if (this.inParams) {
            if (isFlushElement(statement)) {
                this.inParams = false;
            } else if (isArgument(statement)) {
                this.arguments.push(statement);
            } else if (isAttribute(statement)) {
                this.attributes.push(statement);
            } else {
                throw new Error('Compile Error: only parameters allowed before flush-element');
            }
        } else {
            this.statements.push(statement);
        }
    }
    toJSON() {
        let args = this.arguments;
        let keys = args.map(arg => arg[1]);
        let values = args.map(arg => arg[2]);
        let block = this.selfClosing ? null : {
            statements: this.statements,
            parameters: this.table.slots
        };
        return [this.tag, this.attributes, [keys, values], block];
    }
}
export class Template {
    constructor(symbols) {
        this.block = new TemplateBlock(symbols);
    }
    toJSON() {
        return this.block.toJSON();
    }
}
export default class JavaScriptCompiler {
    constructor(opcodes, symbols, options) {
        this.blocks = new Stack();
        this.values = [];
        this.opcodes = opcodes;
        this.template = new Template(symbols);
        this.options = options;
    }
    static process(opcodes, symbols, options) {
        let compiler = new JavaScriptCompiler(opcodes, symbols, options);
        return compiler.process();
    }
    get currentBlock() {
        return this.blocks.current;
    }
    process() {
        this.opcodes.forEach(op => {
            let opcode = op[0];
            let arg = op[1];
            if (!this[opcode]) {
                throw new Error(`unimplemented ${opcode} on JavaScriptCompiler`);
            }
            this[opcode](arg);
        });
        return this.template;
    }
    /// Nesting
    startBlock(program) {
        let block = new InlineBlock(program['symbols']);
        this.blocks.push(block);
    }
    endBlock() {
        let { template, blocks } = this;
        let block = blocks.pop();
        template.block.blocks.push(block.toJSON());
    }
    startProgram() {
        this.blocks.push(this.template.block);
    }
    endProgram() {}
    /// Statements
    text(content) {
        this.push([Ops.Text, content]);
    }
    append(trusted) {
        this.push([Ops.Append, this.popValue(), trusted]);
    }
    comment(value) {
        this.push([Ops.Comment, value]);
    }
    modifier(name) {
        let params = this.popValue();
        let hash = this.popValue();
        this.push([Ops.Modifier, name, params, hash]);
    }
    block([name, template, inverse]) {
        let params = this.popValue();
        let hash = this.popValue();
        let blocks = this.template.block.blocks;
        (false && assert(typeof template !== 'number' || blocks[template] !== null, 'missing block in the compiler'));
        (false && assert(typeof inverse !== 'number' || blocks[inverse] !== null, 'missing block in the compiler'));

        this.push([Ops.Block, name, params, hash, blocks[template], blocks[inverse]]);
    }
    openComponent(element) {
        let tag = this.options && this.options.customizeComponentName ? this.options.customizeComponentName(element.tag) : element.tag;
        let component = new ComponentBlock(tag, element['symbols'], element.selfClosing);
        this.blocks.push(component);
    }
    openSplattedElement(element) {
        let tag = element.tag;
        if (element.blockParams.length > 0) {
            throw new Error(`Compile Error: <${element.tag}> is not a component and doesn't support block parameters`);
        } else {
            this.push([Ops.OpenSplattedElement, tag]);
        }
    }
    openElement(element) {
        let tag = element.tag;
        if (element.blockParams.length > 0) {
            throw new Error(`Compile Error: <${element.tag}> is not a component and doesn't support block parameters`);
        } else {
            this.push([Ops.OpenElement, tag]);
        }
    }
    flushElement() {
        this.push([Ops.FlushElement]);
    }
    closeComponent(_element) {
        if (_element.modifiers.length > 0) {
            throw new Error('Compile Error: Element modifiers are not allowed in components');
        }
        let [tag, attrs, args, block] = this.endComponent();
        this.push([Ops.Component, tag, attrs, args, block]);
    }
    closeDynamicComponent(_element) {
        let [, attrs, args, block] = this.endComponent();
        this.push([Ops.DynamicComponent, this.popValue(), attrs, args, block]);
    }
    closeElement(_element) {
        this.push([Ops.CloseElement]);
    }
    staticAttr([name, namespace]) {
        let value = this.popValue();
        this.push([Ops.StaticAttr, name, value, namespace]);
    }
    dynamicAttr([name, namespace]) {
        let value = this.popValue();
        this.push([Ops.DynamicAttr, name, value, namespace]);
    }
    componentAttr([name, namespace]) {
        let value = this.popValue();
        this.push([Ops.ComponentAttr, name, value, namespace]);
    }
    trustingAttr([name, namespace]) {
        let value = this.popValue();
        this.push([Ops.TrustingAttr, name, value, namespace]);
    }
    trustingComponentAttr([name, namespace]) {
        let value = this.popValue();
        this.push([Ops.TrustingComponentAttr, name, value, namespace]);
    }
    staticArg(name) {
        let value = this.popValue();
        this.push([Ops.StaticArg, name, value]);
    }
    dynamicArg(name) {
        let value = this.popValue();
        this.push([Ops.DynamicArg, name, value]);
    }
    yield(to) {
        let params = this.popValue();
        this.push([Ops.Yield, to, params]);
    }
    attrSplat(to) {
        // consume (and disregard) the value pushed for the
        // ...attributes attribute
        this.popValue();
        this.push([Ops.AttrSplat, to]);
    }
    debugger(evalInfo) {
        this.push([Ops.Debugger, evalInfo]);
        this.template.block.hasEval = true;
    }
    hasBlock(name) {
        this.pushValue([Ops.HasBlock, name]);
    }
    hasBlockParams(name) {
        this.pushValue([Ops.HasBlockParams, name]);
    }
    partial(evalInfo) {
        let params = this.popValue();
        this.push([Ops.Partial, params[0], evalInfo]);
        this.template.block.hasEval = true;
    }
    /// Expressions
    literal(value) {
        if (value === undefined) {
            this.pushValue([Ops.Undefined]);
        } else {
            this.pushValue(value);
        }
    }
    unknown(name) {
        this.pushValue([Ops.Unknown, name]);
    }
    get([head, path]) {
        this.pushValue([Ops.Get, head, path]);
    }
    maybeLocal(path) {
        this.pushValue([Ops.MaybeLocal, path]);
    }
    concat() {
        this.pushValue([Ops.Concat, this.popValue()]);
    }
    helper(name) {
        let params = this.popValue();
        let hash = this.popValue();
        this.pushValue([Ops.Helper, name, params, hash]);
    }
    /// Stack Management Opcodes
    prepareArray(size) {
        let values = [];
        for (let i = 0; i < size; i++) {
            values.push(this.popValue());
        }
        this.pushValue(values);
    }
    prepareObject(size) {
        (false && assert(this.values.length >= size, `Expected ${size} values on the stack, found ${this.values.length}`));

        let keys = new Array(size);
        let values = new Array(size);
        for (let i = 0; i < size; i++) {
            keys[i] = this.popValue();
            values[i] = this.popValue();
        }
        this.pushValue([keys, values]);
    }
    /// Utilities
    endComponent() {
        let component = this.blocks.pop();
        (false && assert(component instanceof ComponentBlock, 'Compiler bug: endComponent() should end a component'));

        return component.toJSON();
    }
    push(args) {
        while (args[args.length - 1] === null) {
            args.pop();
        }
        this.currentBlock.push(args);
    }
    pushValue(val) {
        this.values.push(val);
    }
    popValue() {
        (false && assert(this.values.length, 'No expression found on stack'));

        return this.values.pop();
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,