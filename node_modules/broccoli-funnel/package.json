{
  "_from": "broccoli-funnel@^2.0.2",
  "_id": "broccoli-funnel@2.0.2",
  "_inBundle": false,
  "_integrity": "sha512-/vDTqtv7ipjEZQOVqO4vGDVAOZyuYzQ/EgGoyewfOgh1M7IQAToBKZI0oAQPgMBeFPPlIbfMuAngk+ohPBuaHQ==",
  "_location": "/broccoli-funnel",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "broccoli-funnel",
    "fetchSpec": "^2.0.2",
    "name": "broccoli-funnel",
    "raw": "broccoli-funnel@^2.0.2",
    "rawSpec": "^2.0.2",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER",
    "/@ember/jquery",
    "/@ember/jquery/ember-cli-babel",
    "/@ember/ordered-set/ember-cli-babel",
    "/@ember/test-helpers",
    "/@ember/test-helpers/ember-cli-babel",
    "/broccoli-babel-transpiler",
    "/broccoli-stew",
    "/ember-assign-polyfill/ember-cli-babel",
    "/ember-auto-import/ember-cli-babel",
    "/ember-bootstrap",
    "/ember-bootstrap-cp-validations/ember-cli-babel",
    "/ember-bootstrap/ember-cli-babel",
    "/ember-cli",
    "/ember-cli-app-version/ember-cli-babel",
    "/ember-cli-babel",
    "/ember-cli-babel/broccoli-babel-transpiler",
    "/ember-cli-preprocess-registry",
    "/ember-cli-test-loader/ember-cli-babel",
    "/ember-cli/broccoli-babel-transpiler",
    "/ember-composability/ember-cli-babel",
    "/ember-concurrency/ember-cli-babel",
    "/ember-data",
    "/ember-export-application-global/ember-cli-babel",
    "/ember-in-element-polyfill/ember-cli-babel",
    "/ember-in-viewport/ember-cli-babel",
    "/ember-infinity/broccoli-babel-transpiler",
    "/ember-infinity/ember-cli-babel",
    "/ember-inflector/ember-cli-babel",
    "/ember-keyboard/ember-cli-babel",
    "/ember-load-initializers/ember-cli-babel",
    "/ember-material-design-icons-shim/ember-cli-babel",
    "/ember-maybe-in-element/ember-cli-babel",
    "/ember-popper/ember-cli-babel",
    "/ember-promise-utils/ember-cli-babel",
    "/ember-qunit",
    "/ember-qunit/ember-cli-babel",
    "/ember-raf-scheduler/ember-cli-babel",
    "/ember-require-module/ember-cli-babel",
    "/ember-resolver",
    "/ember-resolver/ember-cli-babel",
    "/ember-responsive/ember-cli-babel",
    "/ember-runtime-enumerable-includes-polyfill/ember-cli-babel",
    "/ember-source",
    "/ember-uploader/ember-cli-babel",
    "/ember-validators/ember-cli-babel",
    "/fastboot-transform/broccoli-stew",
    "/qunit-dom",
    "/semantic-ui-ember/ember-cli-babel"
  ],
  "_resolved": "https://registry.npmjs.org/broccoli-funnel/-/broccoli-funnel-2.0.2.tgz",
  "_shasum": "0edf629569bc10bd02cc525f74b9a38e71366a75",
  "_shrinkwrap": null,
  "_spec": "broccoli-funnel@^2.0.2",
  "_where": "/home/daniel/Documents/web-miniproject/client",
  "author": {
    "name": "Robert Jackson"
  },
  "bugs": {
    "url": "https://github.com/broccolijs/broccoli-funnel/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "array-equal": "^1.0.0",
    "blank-object": "^1.0.1",
    "broccoli-plugin": "^1.3.0",
    "debug": "^2.2.0",
    "fast-ordered-set": "^1.0.0",
    "fs-tree-diff": "^0.5.3",
    "heimdalljs": "^0.2.0",
    "minimatch": "^3.0.0",
    "mkdirp": "^0.5.0",
    "path-posix": "^1.0.0",
    "rimraf": "^2.4.3",
    "symlink-or-copy": "^1.0.0",
    "walk-sync": "^0.3.1"
  },
  "deprecated": false,
  "description": "Broccoli plugin that allows you to filter files selected from an input node down based on regular expressions.",
  "devDependencies": {
    "broccoli-builder": "^0.18.0",
    "chai": "^3.2.0",
    "eslint-plugin-mocha": "^4.11.0",
    "fixturify": "^0.3.0",
    "fs-extra": "^0.30.0",
    "mocha": "~3.0.2",
    "mocha-eslint": "^4.1.0",
    "rimraf": "^2.3.2",
    "rsvp": "^3.3.1"
  },
  "engines": {
    "node": "^4.5 || 6.* || >= 7.*"
  },
  "files": [
    "index.js"
  ],
  "homepage": "https://github.com/broccolijs/broccoli-funnel#readme",
  "keywords": [
    "broccoli-plugin",
    "javascript"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "broccoli-funnel",
  "optionalDependencies": {},
  "readme": "# Broccoli Funnel\n\n[![Build Status](https://travis-ci.org/broccolijs/broccoli-funnel.svg?branch=master)](https://travis-ci.org/broccolijs/broccoli-funnel)\n[![Build status](https://ci.appveyor.com/api/projects/status/3y3wo7hipq6d0cbp/branch/master?svg=true)](https://ci.appveyor.com/project/embercli/broccoli-funnel/branch/master)\n\nGiven an input node, the Broccoli Funnel plugin returns a new node with only a\nsubset of the files from the input node. The files can be moved to different\npaths. You can use regular expressions to select which files to include or\nexclude.\n\n## Documentation\n\n### `new Funnel(inputNode, options)`\n\n`inputNode` *{Single node}*\n\nA Broccoli node (formerly: \"tree\"). A node in Broccoli can be either a string\nthat references a directory in your project or a node object returned from\nrunning another Broccoli plugin.\n\nIf your project has the following file structure:\n\n```shell\n.\n├── Brocfile.js\n└── src/\n    ├── css/\n    │   ├── reset.css\n    │   └── todos.css\n    ├── icons/\n    │   ├── check-mark.png\n    │   └── logo.jpg\n    └── javascript/\n        ├── app.js\n        └── todo.js\n```\n\nYou can select a subsection of the tree via Funnel:\n\n```javascript\nvar Funnel = require('broccoli-funnel');\nvar cssFiles = new Funnel('src/css');\n\n/*\n  cssFiles contains the following files:\n\n  ├── reset.css\n  └── todos.css\n*/\n\n// export the node for Broccoli to begin processing\nmodule.exports = cssFiles;\n```\n\n#### Options\n\n`srcDir` *{String}*\n\nA string representing the portion of the input node to start the funneling\nfrom. This will be the base path for any `include`/`exclude` regexps.\n\nDefault: `'.'`, the root path of the input node.\n\nIf your project has the following file structure:\n\n```shell\n.\n├── Brocfile.js\n└── src/\n    ├── css/\n    │   ├── reset.css\n    │   └── todos.css\n    ├── icons/\n    │   ├── check-mark.png\n    │   └── logo.jpg\n    └── javascript/\n        ├── app.js\n        └── todo.js\n```\n\nYou can select a subsection of the node via Funnel:\n\n```javascript\nvar Funnel = require('broccoli-funnel');\nvar MergeTrees = require('broccoli-merge-trees');\n\n// root of our source files\nvar projectFiles = 'src';\n\n/* get a new node of only files in the 'src/css' directory\n  cssFiles contains the following files:\n\n  ├── reset.css\n  └── todos.css\n*/\nvar cssFiles = new Funnel(projectFiles, {\n  srcDir: 'css'\n});\n\n/* get a new node of only files in the 'src/icons' directory\n  imageFiles contains the following files:\n\n  ├── check-mark.png\n  └── logo.jpg\n*/\nvar imageFiles = new Funnel(projectFiles, {\n  srcDir: 'icons'\n});\n\n\nmodule.exports = new MergeTrees([cssFiles, imageFiles]);\n```\n\n----\n\n`destDir` *{String}*\n\nA string representing the destination path that filtered files will be copied to.\n\nDefault: `'.'`, the root path of input node.\n\nIf your project has the following file structure:\n\n```shell\n.\n├── Brocfile.js\n└── src/\n    ├── css/\n    │   ├── reset.css\n    │   └── todos.css\n    ├── icons/\n    │   ├── check-mark.png\n    │   └── logo.jpg\n    └── javascript/\n        ├── app.js\n        └── todo.js\n```\n\nYou can select a subsection of the directory structure via Funnel and copy it to a new location:\n\n```javascript\nvar Funnel = require('broccoli-funnel');\n\nvar cssFiles = new Funnel('src/css', {\n  destDir: 'build'\n});\n\n/*\n  cssFiles contains the following files:\n\n  build/\n  ├── reset.css\n  └── todos.css\n*/\n\nmodule.exports = cssFiles;\n```\n\n----\n\n`allowEmpty` *{Boolean}*\n\nWhen using `srcDir`/`destDir` options only (aka no filtering via `include`/`exclude` options), if the `srcDir` were missing an error would be thrown.\nSetting `allowEmpty` to true, will prevent that error by creating an empty directory at the destination path.\n\n----\n\n`include` *{Array of GlobStrings|RegExps|Functions}*\n\nOne or more matcher expression (regular expression, glob string, or function). Files within the node whose names match this\nexpression will be copied (with the location inside their parent directories\npreserved) to the `destDir`.\n\nDefault: `[]`.\n\nIf your project has the following file structure\n\n```shell\n.\n├── Brocfile.js\n└── src/\n    ├── css/\n    │   ├── reset.css\n    │   └── todos.css\n    ├── icons/\n    │   ├── check-mark.png\n    │   └── logo.jpg\n    └── javascript/\n        ├── app.js\n        └── todo.js\n```\n\nYou can select files that match a glob expression and copy those subdirectories to a\nnew location, preserving their location within parent directories:\n\n```javascript\nvar Funnel = require('broccoli-funnel');\n\n// finds all files that match /todo/ and moves them\n// the destDir\nvar todoRelatedFiles = new Funnel('src', {\n  include: ['todo/**/*']\n});\n\n/*\n  todoRelatedFiles contains the following files:\n  .\n  ├── css\n  │   └── todos.css\n  └── javascript\n      └── todo.js\n*/\n\nmodule.exports = todoRelatedFiles;\n```\n\n----\n\n`exclude` *{Array of Glob Strings|Function}*\n\nOne or more matcher expression (regular expression, glob string, or function). Files within the node whose names match this\nexpression will _not_ be copied to the `destDir` if they otherwise would have\nbeen.\n\n*Note, in the case when a file matches both an include and exclude pattern,\nthe exclude pattern wins*\n\nDefault: `[]`.\n\nIf your project has the following file structure:\n\n```shell\n.\n├── Brocfile.js\n└── src/\n    ├── css/\n    │   ├── reset.css\n    │   └── todos.css\n    ├── icons/\n    │   ├── check-mark.png\n    │   └── logo.jpg\n    └── javascript/\n        ├── app.js\n        └── todo.js\n```\n\nYou can select files that match a glob expression and exclude them from copying:\n\n```javascript\nvar Funnel = require('broccoli-funnel');\n\n// finds all files in 'src' EXCEPT `todo.js` in any directory\n// or sub-directory and adds them to a node.\nvar nobodyLikesTodosAnyway = new Funnel('src', {\n  exclude: ['**/todo.js']\n});\n\n/*\n  nobodyLikesTodosAnyway contains the following files:\n  .\n  ├── css\n  │   └── reset.css\n  ├── icons\n  │   ├── check-mark.png\n  │   └── logo.jpg\n  └── javascript\n      └── app.js\n*/\n\nmodule.exports = nobodyLikesTodosAnyway;\n```\n\n----\n\n`files` *{Array of Strings}*\n\nOne or more relative file paths. Files within the node whose relative paths match\nwill be copied (with the location inside their parent directories\npreserved) to the `destDir`.\n\nDefault: `[]`.\n\nIf your project has the following file structure\n\n```shell\n.\n├── Brocfile.js\n└── src/\n    ├── css/\n    │   ├── reset.css\n    │   └── todos.css\n    ├── icons/\n    │   ├── check-mark.png\n    │   └── logo.jpg\n    └── javascript/\n        ├── app.js\n        └── todo.js\n```\n\nYou can select a specific list of files copy those subdirectories to a\nnew location, preserving their location within parent directories:\n\n```javascript\nvar Funnel = require('broccoli-funnel');\n\n// finds these specific files and moves them to the destDir\nvar someFiles = new Funnel('src', {\n  files: ['css/reset.css', 'icons/check-mark.png']\n});\n\n/*\n  someFiles contains the following files:\n  .\n  ├── css\n  │   └── reset.css\n  └── icons\n      └── check-mark.png\n*/\n\nmodule.exports = someFiles;\n```\n\n----\n\n`getDestinationPath` *{Function}*\n\nThis method will get called for each file, receiving the currently processing\n`relativePath` as its first argument. The value returned from\n`getDestinationPath` will be used as the destination for the new node. This is\na very simple way to rename files or move them from one path to another (replacing the need\nfor `broccoli-file-mover` for example).\n\nThe return value of this method is cached for each input file. This means that\n`getDestinationPath` will only be called once per `relativePath`.\n\nIn the following example, `getDestinationPath` is used to move `main.js` to\n`ember-metal.js`:\n\n```javascript\nvar node = new Funnel('packages/ember-metal/lib', {\n  destDir: 'ember-metal',\n\n  getDestinationPath: function(relativePath) {\n    if (relativePath === 'lib/main.js') {\n      return 'ember-metal.js';\n    }\n\n    return relativePath;\n  }\n});\n```\n\n## ZOMG!!! TESTS?!?!!?\n\nI know, right?\n\nRunning the tests:\n\n```javascript\nnpm install\nnpm test\n```\n\n## License\n\nThis project is distributed under the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/broccolijs/broccoli-funnel.git"
  },
  "scripts": {
    "test": "mocha tests/",
    "test:debug": "mocha debug tests/"
  },
  "version": "2.0.2"
}
