{
  "_from": "ember-cli-babel@^7.1.2",
  "_id": "ember-cli-babel@7.7.3",
  "_inBundle": false,
  "_integrity": "sha512-/LWwyKIoSlZQ7k52P+6agC7AhcOBqPJ5C2u27qXHVVxKvCtg6ahNuRk/KmfZmV4zkuw4EjTZxfJE1PzpFyHkXg==",
  "_location": "/ember-cli-babel",
  "_phantomChildren": {
    "@babel/core": "7.4.3",
    "@babel/polyfill": "7.4.3",
    "@types/minimatch": "3.0.3",
    "async-disk-cache": "1.3.4",
    "async-promise-queue": "1.0.4",
    "broccoli-funnel": "2.0.2",
    "broccoli-plugin": "1.3.1",
    "clone": "2.1.2",
    "ensure-posix-path": "1.1.1",
    "fs-updater": "1.0.4",
    "hash-for-dep": "1.5.1",
    "heimdalljs": "0.2.6",
    "heimdalljs-logger": "0.1.10",
    "json-stable-stringify": "1.0.1",
    "matcher-collection": "1.1.2",
    "mkdirp": "0.5.1",
    "object-assign": "4.1.1",
    "object-hash": "1.3.1",
    "path-posix": "1.0.0",
    "promise-map-series": "0.2.3",
    "rimraf": "2.6.3",
    "semver": "5.7.0",
    "symlink-or-copy": "1.2.0"
  },
  "_requested": {
    "escapedName": "ember-cli-babel",
    "fetchSpec": "^7.1.2",
    "name": "ember-cli-babel",
    "raw": "ember-cli-babel@^7.1.2",
    "rawSpec": "^7.1.2",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER",
    "/ember-ajax",
    "/ember-cp-validations",
    "/ember-data",
    "/ember-source"
  ],
  "_resolved": "https://registry.npmjs.org/ember-cli-babel/-/ember-cli-babel-7.7.3.tgz",
  "_shasum": "f94709f6727583d18685ca6773a995877b87b8a0",
  "_shrinkwrap": null,
  "_spec": "ember-cli-babel@^7.1.2",
  "_where": "/home/daniel/Documents/web-miniproject/client",
  "author": {
    "name": "Gordon Kristan"
  },
  "bugs": {
    "url": "https://github.com/babel/ember-cli-babel/issues"
  },
  "bundleDependencies": false,
  "changelog": {
    "labels": {
      "breaking": ":boom: Breaking Change",
      "bug": ":bug: Bug Fix",
      "documentation": ":memo: Documentation",
      "enhancement": ":rocket: Enhancement",
      "internal": ":house: Internal"
    },
    "repo": "babel/ember-cli-babel"
  },
  "dependencies": {
    "@babel/core": "^7.0.0",
    "@babel/plugin-proposal-class-properties": "^7.3.4",
    "@babel/plugin-proposal-decorators": "^7.3.0",
    "@babel/plugin-transform-modules-amd": "^7.0.0",
    "@babel/plugin-transform-runtime": "^7.2.0",
    "@babel/polyfill": "^7.0.0",
    "@babel/preset-env": "^7.0.0",
    "@babel/runtime": "^7.2.0",
    "amd-name-resolver": "^1.2.1",
    "babel-plugin-debug-macros": "^0.3.0",
    "babel-plugin-ember-modules-api-polyfill": "^2.8.0",
    "babel-plugin-module-resolver": "^3.1.1",
    "broccoli-babel-transpiler": "^7.1.2",
    "broccoli-debug": "^0.6.4",
    "broccoli-funnel": "^2.0.1",
    "broccoli-source": "^1.1.0",
    "clone": "^2.1.2",
    "ember-cli-babel-plugin-helpers": "^1.1.0",
    "ember-cli-version-checker": "^2.1.2",
    "ensure-posix-path": "^1.0.2",
    "semver": "^5.5.0"
  },
  "deprecated": false,
  "description": "Ember CLI addon for Babel",
  "devDependencies": {
    "babel-eslint": "^10.0.1",
    "broccoli-test-helper": "^1.4.0",
    "chai": "^4.1.2",
    "co": "^4.6.0",
    "common-tags": "^1.8.0",
    "console-ui": "^2.2.2",
    "core-object": "^3.1.5",
    "ember-cli": "~3.3.0",
    "ember-cli-dependency-checker": "^3.0.0",
    "ember-cli-eslint": "^4.2.3",
    "ember-cli-htmlbars": "^3.0.0",
    "ember-cli-htmlbars-inline-precompile": "^1.0.3",
    "ember-cli-inject-live-reload": "^1.8.2",
    "ember-cli-qunit": "^4.3.2",
    "ember-cli-shims": "^1.2.0",
    "ember-load-initializers": "^1.1.0",
    "ember-resolver": "^5.0.1",
    "ember-source": "~3.3.1",
    "ember-source-channel-url": "^1.1.0",
    "eslint-plugin-ember": "^5.2.0",
    "eslint-plugin-node": "^7.0.1",
    "lerna-changelog": "^0.8.0",
    "loader.js": "^4.7.0",
    "mocha": "^5.2.0",
    "resolve": "^1.8.1"
  },
  "directories": {
    "doc": "doc",
    "test": "tests"
  },
  "ember-addon": {
    "configPath": "tests/dummy/config"
  },
  "engines": {
    "node": "6.* || 8.* || >= 10.*"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "homepage": "https://github.com/babel/ember-cli-babel",
  "keywords": [
    "babel",
    "ember",
    "ember-addon",
    "ember-cli",
    "transpile",
    "transpiler"
  ],
  "license": "MIT",
  "name": "ember-cli-babel",
  "optionalDependencies": {},
  "readme": "# ember-cli-babel\n\n[![Build Status](https://travis-ci.org/babel/ember-cli-babel.svg?branch=master)](https://travis-ci.org/babel/ember-cli-babel)\n[![Build status](https://ci.appveyor.com/api/projects/status/2a6pspve1wrwwyj5/branch/master?svg=true)](https://ci.appveyor.com/project/embercli/ember-cli-babel/branch/master)\n\n\nThis Ember-CLI plugin uses [Babel](https://babeljs.io/) and\n[babel-preset-env](https://github.com/babel/babel-preset-env) to allow you to\nuse ES6 syntax with your Ember CLI project.\n\n## Installation\n\n```\nember install ember-cli-babel\n```\n\n## Compatibility\n\n- ember-cli-babel 7.x requires ember-cli 2.13 or above\n\n## Usage\n\nThis plugin should work without any configuration after installing. By default\nit will take every `.js` file in your project and run it through the Babel\ntranspiler to convert your ES6 code to code supported by your target browsers\n(as specified in `config/targets.js` in ember-cli >= 2.13). Running non-ES6\ncode through the transpiler shouldn't change the code at all (likely just a\nformat change if it does).\n\nIf you need to customize the way that `babel-preset-env` configures the plugins\nthat transform your code, you can do it by passing in any of the\n[babel/babel-preset-env options](https://github.com/babel/babel-preset-env/tree/v1.6.1#options).\n*Note: `.babelrc` files are ignored by default.*\n\nExample (configuring babel directly):\n\n```js\n// ember-cli-build.js\n\nlet app = new EmberApp({\n  babel: {\n    // enable \"loose\" mode\n    loose: true,\n    // don't transpile generator functions\n    exclude: [\n      'transform-regenerator',\n    ],\n    plugins: [\n      'transform-object-rest-spread'\n    ]\n  }\n});\n```\n\nExample (configuring ember-cli-babel itself):\n\n```js\n// ember-cli-build.js\n\nlet app = new EmberApp({\n  'ember-cli-babel': {\n    compileModules: false\n  }\n});\n```\n\n### Options\n\nThere are a few different options that may be provided to ember-cli-babel.\nThese options are typically set in an apps `ember-cli-build.js` file, or in an\naddon or engine's `index.js`.\n\n```ts\ntype BabelPlugin = string | [string, any] | [any, any];\n\ninterface EmberCLIBabelConfig {\n  /**\n    Configuration options for babel-preset-env.\n    See https://github.com/babel/babel-preset-env/tree/v1.6.1#options for details on these options.\n  */\n  babel?: {\n    spec?: boolean;\n    loose?: boolean;\n    debug?: boolean;\n    include?: string[];\n    exclude?: string[];\n    useBuiltIns?: boolean;\n    sourceMaps?: boolean | \"inline\" | \"both\";\n    plugins?: BabelPlugin[];\n  };\n\n  /**\n    Configuration options for ember-cli-babel itself.\n  */\n  'ember-cli-babel'?: {\n    includePolyfill?: boolean;\n    includeExternalHelpers?: boolean;\n    compileModules?: boolean;\n    disableDebugTooling?: boolean;\n    disablePresetEnv?: boolean;\n    disableEmberModulesAPIPolyfill?: boolean;\n    disableDecoratorTransforms?: boolean;\n    extensions?: string[];\n  };\n}\n```\n\nThe exact location you specify these options varies depending on the type of\nproject you're working on. As a concrete example, to add\n`babel-plugin-transform-object-rest-spread` so that your project can use object\nrest/spread syntax, you would do something like this in an app:\n\n```js\n// ember-cli-build.js\nlet app = new EmberApp(defaults, {\n  babel: {\n    plugins: ['transform-object-rest-spread']\n  }\n});\n```\n\nIn an engine:\n```js\n// index.js\nmodule.exports = EngineAddon.extend({\n  babel: {\n    plugins: ['transform-object-rest-spread']\n  }\n});\n```\n\nIn an addon:\n```js\n// index.js\nmodule.exports = {\n  options: {\n    babel: {\n      plugins: ['transform-object-rest-spread']\n    }\n  }\n};\n```\n\n#### Polyfill\n\nBabel comes with a polyfill that includes a custom [regenerator\nruntime](https://github.com/facebook/regenerator/blob/master/runtime.js) and\n[core-js](https://github.com/zloirock/core-js). Many transformations will work\nwithout it, but for full support you may need to include the polyfill in your\napp.\n\nTo include it in your app, pass `includePolyfill: true` in your `ember-cli-babel` options.\n\n```js\n// ember-cli-build.js\n\nlet app = new EmberApp(defaults, {\n  'ember-cli-babel': {\n    includePolyfill: true\n  }\n});\n```\n\n#### External Helpers\n\nBabel often includes helper functions to handle some of the more complex logic\nin codemods. These functions are inlined by default, so they are duplicated in\nevery file that they are used in, which adds some extra weight to final builds.\n\nEnabling `includeExternalHelpers` will cause Babel to import these helpers from\na shared module, reducing app size overall. This option is available _only_ to\nthe root application, because it is a global configuration value due to the fact\nthat there can only be one version of helpers included.\n\nNote that there is currently no way to whitelist or blacklist helpers, so all\nhelpers will be included, even ones which are not used. If your app is small,\nthis could add to overall build size, so be sure to check.\n\n`ember-cli-babel` will attempt to include helpers if it believes that it will\nlower your build size, using a number of heuristics. You can override this to\nforce inclusion or exclusion of helpers in your app by passing `true` or `false`\nto `includeExternalHelpers` in your `ember-cli-babel` options.\n\n```js\n// ember-cli-build.js\n\nlet app = new EmberApp(defaults, {\n  'ember-cli-babel': {\n    includeExternalHelpers: true\n  }\n});\n```\n\n#### Enabling Source Maps\n\nBabel generated source maps will enable you to debug your original ES6 source\ncode. This is disabled by default because it will slow down compilation times.\n\nTo enable it, pass `sourceMaps: 'inline'` in your `babel` options.\n\n```js\n// ember-cli-build.js\n\nlet app = new EmberApp(defaults, {\n  babel: {\n    sourceMaps: 'inline'\n  }\n});\n```\n\n#### Modules\n\nOlder versions of Ember CLI (`< 2.12`) use its own ES6 module transpiler.\nBecause of that, this plugin disables Babel module compilation by blacklisting\nthat transform when running under affected ember-cli versions. If you find that\nyou want to use the Babel module transform instead of the Ember CLI one, you'll\nhave to explicitly set `compileModules` to `true` in your configuration. If\n`compileModules` is anything other than `true`, this plugin will leave the\nmodule syntax compilation up to Ember CLI.\n\n#### Disabling Debug Tooling Support\n\nIf for some reason you need to disable this debug tooling, you can opt-out via\nconfiguration.\n\nIn an app that would look like:\n\n```js\n// ember-cli-build.js\nmodule.exports = function(defaults) {\n  let app = new EmberApp(defaults, {\n    'ember-cli-babel': {\n      disableDebugTooling: true\n    }\n  });\n\n  return app.toTree();\n}\n```\n\n### Addon usage\n\n#### Adding Custom Plugins\n\nYou can add custom plugins to be used during transpilation of the `addon/` or\n`addon-test-support/` trees by ensuring that your addon's `options.babel` is\nproperly populated (as mentioned above in the `Options` section).\n\n#### Additional Trees\n\nFor addons which want additional customizations, they are able to interact with\nthis addon directly.\n\n```ts\ninterface EmberCLIBabel {\n  /**\n    Used to generate the options that will ultimately be passed to babel itself.\n  */\n  buildBabelOptions(config?: EmberCLIBabelConfig): Opaque;\n\n  /**\n    Supports easier transpilation of non-standard input paths (e.g. to transpile\n    a non-addon NPM dependency) while still leveraging the logic within\n    ember-cli-babel for transpiling (e.g. targets, preset-env config, etc).\n  */\n  transpileTree(inputTree: BroccoliTree, config?: EmberCLIBabelConfig): BroccoliTree;\n\n  /**\n    Used to determine if a given plugin is required by the current target configuration.\n    Does not take `includes` / `excludes` into account.\n\n    See https://github.com/babel/babel-preset-env/blob/master/data/plugins.json for the list\n    of known plugins.\n  */\n  isPluginRequired(pluginName: string): boolean;\n}\n```\n\n#### `buildBabelOptions` usage\n\n```js\n// find your babel addon (can use `this.findAddonByName('ember-cli-babel')` in ember-cli@2.14 and newer)\nlet babelAddon = this.addons.find(addon => addon.name === 'ember-cli-babel');\n\n// create the babel options to use elsewhere based on the config above\nlet options = babelAddon.buildBabelOptions(config)\n\n// now you can pass these options off to babel or broccoli-babel-transpiler\nrequire('babel-core').transform('something', options);\n```\n\n#### `transpileTree` usage\n\n```js\n// find your babel addon (can use `this.findAddonByName('ember-cli-babel')` in ember-cli@2.14 and newer)\nlet babelAddon = this.addons.find(addon => addon.name === 'ember-cli-babel');\n\n// invoke .transpileTree passing in the custom input tree\nlet transpiledCustomTree = babelAddon.transpileTree(someCustomTree);\n```\n\n### Debug Tooling\n\nIn order to allow apps and addons to easily provide good development mode\nergonomics (assertions, deprecations, etc) but still perform well in production\nmode ember-cli-babel automatically manages stripping / removing certain debug\nstatements. This concept was originally proposed in [ember-cli/rfcs#50](https://github.com/ember-cli/rfcs/pull/50),\nbut has been slightly modified during implementation (after researching what works well and what does not).\n\n#### Debug Macros\n\nTo add convienient deprecations and assertions, consumers (in either an app or an addon) can do the following:\n\n```js\nimport { deprecate, assert } from '@ember/debug';\n\nexport default Ember.Component.extend({\n  init() {\n    this._super(...arguments);\n    deprecate(\n      'Passing a string value or the `sauce` parameter is deprecated, please pass an instance of Sauce instead',\n      false,\n      { until: '1.0.0', id: 'some-addon-sauce' }\n    );\n    assert('You must provide sauce for x-awesome.', this.sauce);\n  }\n})\n```\n\nIn testing and development environments those statements will be executed (and\nassert or deprecate as appropriate), but in production builds they will be\ninert (and stripped during minification).\n\nThe following are named exports that are available from `@ember/debug`:\n\n* `function deprecate(message: string, predicate: boolean, options: any): void` - Results in calling `Ember.deprecate`.\n* `function assert(message: string, predicate: boolean): void` - Results in calling `Ember.assert`.\n* `function warn(message: string, predicate: boolean): void` - Results in calling `Ember.warn`.\n\n#### General Purpose Env Flags\n\nIn some cases you may have the need to do things in debug builds that isn't\nrelated to asserts/deprecations/etc. For example, you may expose certain API's\nfor debugging only. You can do that via the `DEBUG` environment flag:\n\n```js\nimport { DEBUG } from '@glimmer/env';\n\nconst Component = Ember.Component.extend();\n\nif (DEBUG) {\n  Component.reopen({\n    specialMethodForDebugging() {\n      // do things ;)\n    }\n  });\n}\n```\n\nIn testing and development environments `DEBUG` will be replaced by the boolean\nliteral `true`, and in production builds it will be replaced by `false`. When\nran through a minifier (with dead code elimination) the entire section will be\nstripped.\n\nPlease note, that these general purpose environment related flags (e.g. `DEBUG`\nas a boolean flag) are imported from `@glimmer/env` not from an `@ember`\nnamespace.\n\n#### Parallel Builds\n\nBy default, [broccoli-babel-transpiler] will attempt to spin up several\nsub-processes (~1 per available core), to achieve parallelization. (Once Node.js\nhas built-in worker support, we plan to utilize it.) This yields significant Babel\nbuild time improvements.\n\nUnfortunately, some Babel plugins may break this functionality.\nWhen this occurs, we gracefully fallback to the old serial strategy.\n\nTo have the build fail when failing to do parallel builds, opt-in is via:\n\n```js\nlet app = new EmberAddon(defaults, {\n  'ember-cli-babel': {\n    throwUnlessParallelizable: true\n  }\n});\n```\n*Note: Future versions will enable this flag by default.*\n\nRead more about [broccoli parallel transpilation].\n\n[broccoli-babel-transpiler]: https://github.com/babel/broccoli-babel-transpiler\n[broccoli parallel transpilation]: https://github.com/babel/broccoli-babel-transpiler#parallel-transpilation\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/babel/ember-cli-babel.git"
  },
  "scripts": {
    "build": "ember build",
    "changelog": "lerna-changelog",
    "lint:js": "eslint ./*.js addon addon-test-support app blueprints config lib server test-support tests",
    "start": "ember serve",
    "test": "mocha node-tests && ember test",
    "test:all": "mocha node-tests && ember try:each",
    "test:node": "mocha node-tests",
    "test:node:debug": "mocha debug node-tests"
  },
  "version": "7.7.3"
}
